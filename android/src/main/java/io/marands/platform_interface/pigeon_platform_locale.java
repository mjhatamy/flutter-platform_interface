// Autogenerated from Pigeon (v0.1.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package io.marands.platform_interface;

import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.StandardMessageCodec;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings("unused")
public class pigeon_platform_locale {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class PiLocale {
    private String languageCode;
    public String getLanguageCode() { return languageCode; }
    public void setLanguageCode(String setterArg) { this.languageCode = setterArg; }

    private String countryCode;
    public String getCountryCode() { return countryCode; }
    public void setCountryCode(String setterArg) { this.countryCode = setterArg; }

    private String scriptCode;
    public String getScriptCode() { return scriptCode; }
    public void setScriptCode(String setterArg) { this.scriptCode = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("languageCode", languageCode);
      toMapResult.put("countryCode", countryCode);
      toMapResult.put("scriptCode", scriptCode);
      return toMapResult;
    }
    static PiLocale fromMap(HashMap map) {
      PiLocale fromMapResult = new PiLocale();
      Object languageCode = map.get("languageCode");
      fromMapResult.languageCode = (String)languageCode;
      Object countryCode = map.get("countryCode");
      fromMapResult.countryCode = (String)countryCode;
      Object scriptCode = map.get("scriptCode");
      fromMapResult.scriptCode = (String)scriptCode;
      return fromMapResult;
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface PlatformLocale {
    PiLocale _currentLocale();

    /** Sets up an instance of `PlatformLocale` to handle messages through the `binaryMessenger` */
    static void setup(BinaryMessenger binaryMessenger, PlatformLocale api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PlatformLocale._currentLocale", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              PiLocale output = api._currentLocale();
              wrapped.put("result", output.toMap());
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static HashMap wrapError(Exception exception) {
    HashMap<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", null);
    errorMap.put("details", null);
    return errorMap;
  }
}
