// Autogenerated from Pigeon (v0.1.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import
library platform_interface.platform_locale;
import 'dart:async';
import 'package:flutter/services.dart';

class PiLocale {
  String languageCode;
  String countryCode;
  String scriptCode;
  // ignore: unused_element
  Map<dynamic, dynamic> toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['languageCode'] = languageCode;
    pigeonMap['countryCode'] = countryCode;
    pigeonMap['scriptCode'] = scriptCode;
    return pigeonMap;
  }
  // ignore: unused_element
  static PiLocale fromMap(Map<dynamic, dynamic> pigeonMap) {
    final PiLocale result = PiLocale();
    result.languageCode = pigeonMap['languageCode'];
    result.countryCode = pigeonMap['countryCode'];
    result.scriptCode = pigeonMap['scriptCode'];
    return result;
  }
}

class PlatformLocale {
  Future<PiLocale> _currentLocale() async {
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('io.marands.platform_interface/PlatformLocale._currentLocale', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(null);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return PiLocale.fromMap(replyMap['result']);
    }
    
  }
}

