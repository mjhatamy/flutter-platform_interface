// Autogenerated from Pigeon (v0.1.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "pigeon_platform_locale.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

NSDictionary* wrapResult(NSDictionary *result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = [NSDictionary dictionaryWithObjectsAndKeys:
        (error.code ? error.code : [NSNull null]), @"code",
        (error.message ? error.message : [NSNull null]), @"message",
        (error.details ? error.details : [NSNull null]), @"details",
        nil];
  }
  return [NSDictionary dictionaryWithObjectsAndKeys:
      (result ? result : [NSNull null]), @"result",
      errorDict, @"error",
      nil];
}

NSDictionary* wrapResult2(NSArray *result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = [NSDictionary dictionaryWithObjectsAndKeys:
        (error.code ? error.code : [NSNull null]), @"code",
        (error.message ? error.message : [NSNull null]), @"message",
        (error.details ? error.details : [NSNull null]), @"details",
        nil];
  }
  return [NSDictionary dictionaryWithObjectsAndKeys:
      (result ? result : [NSNull null]), @"result",
      errorDict, @"error",
      nil];
}

@interface PiLocale ()
+(PiLocale*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end

@implementation PiLocale
+(PiLocale*)fromMap:(NSDictionary*)dict {
  PiLocale* result = [[PiLocale alloc] init];
  result.languageCode = dict[@"languageCode"];
  if ((NSNull *)result.languageCode == [NSNull null]) {
    result.languageCode = nil;
  }
  result.countryCode = dict[@"countryCode"];
  if ((NSNull *)result.countryCode == [NSNull null]) {
    result.countryCode = nil;
  }
  result.scriptCode = dict[@"scriptCode"];
  if ((NSNull *)result.scriptCode == [NSNull null]) {
    result.scriptCode = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.languageCode ? self.languageCode : [NSNull null]), @"languageCode", (self.countryCode ? self.countryCode : [NSNull null]), @"countryCode", (self.scriptCode ? self.scriptCode : [NSNull null]), @"scriptCode", nil];
}
@end

void PlatformLocaleSetup(id<FlutterBinaryMessenger> binaryMessenger, id<PlatformLocale> api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.PlatformLocale._currentLocale"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        PiLocale *output = [api _currentLocale:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
